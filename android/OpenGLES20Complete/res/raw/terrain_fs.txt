precision highp float;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform sampler2D tex3;
uniform sampler2D tex4;
varying vec2 f_txcoord;
varying vec3 f_lightPos;
varying vec3 f_normal;
varying vec3 f_vertex;
varying vec3 f_worldspacen;
varying vec3 f_worldspacev;

void main()
{
    vec3 L = normalize(f_lightPos - f_vertex); 
    vec3 E = normalize(-f_vertex);
    vec3 R = normalize(-reflect(L,f_normal));
    
    vec3 diffuse = vec3(0.8) * max(dot(L, f_normal), 0.0);
    diffuse = clamp(diffuse, 0.0,1.0);
    
    vec4 color1 = texture2D(tex1, f_txcoord*2.0);
    vec4 color2 = texture2D(tex2, f_txcoord*2.0);
    vec4 color3 = texture2D(tex3, f_txcoord * 2.0);
    vec4 color4 = texture2D(tex4, f_txcoord);

    float dotprod = dot( normalize(vec3(.0,1.0,.0)),  f_worldspacen );
	float mixval = clamp((1.0-dotprod)*2.0,0.0,1.0);

    vec4 color = mix(color1, color2, mixval);
    if (f_worldspacev.y >0.5){
    
    	color = mix(color, color4, clamp(1.0/.2 * (f_worldspacev.y - .5), 0.0,1.0));
    	mixval = 1.0;
    
    }
    else if (f_worldspacev.y <-0.5){
    
    	color = mix(color3, color, clamp(1.0/.2 *(f_worldspacev.y + .5), 0.0,1.0));
    	mixval = 0.0;
    
    }

	vec3 specular = vec3(mixval * .4)*pow(max(dot(R,E),0.0), mixval * 6.0);
    specular = clamp(specular, 0.0,1.0);

    vec3 ambient = vec3(0.1) * vec3(color);
    vec3 intensity = vec3(color) * diffuse;
    gl_FragColor = vec4(ambient+intensity+specular, 1.0);
}
